const { app, BrowserWindow, ipcMain } = require('electron')
const path = require('path')
const isDev = !app.isPackaged
const { exec, spawn } = require('child_process')
const https = require('https')
const fs = require('fs')
const os = require('os')

let mainWindow;
let ollamaProcess;

// Ollama installation and management functions
const getOllamaInstallScript = () => {
  return new Promise((resolve, reject) => {
    https.get('https://ollama.ai/install.sh', (res) => {
      let data = ''
      res.on('data', (chunk) => {
        data += chunk
      })
      res.on('end', () => {
        resolve(data)
      })
    }).on('error', (err) => {
      reject(err)
    })
  })
}

const installOllama = async () => {
  const platform = os.platform()
  
  if (platform === 'darwin') {
    const script = await getOllamaInstallScript()
    const tempPath = path.join(os.tmpdir(), 'ollama-install.sh')
    
    fs.writeFileSync(tempPath, script)
    fs.chmodSync(tempPath, '755')
    
    return new Promise((resolve, reject) => {
      exec(\`sh \${tempPath}\`, (error, stdout, stderr) => {
        if (error) {
          reject(error)
          return
        }
        resolve(stdout)
      })
    })
  } else if (platform === 'win32') {
    // Windows installation logic (to be implemented)
    throw new Error('Windows installation not yet implemented')
  } else {
    throw new Error('Unsupported platform')
  }
}

const startOllamaServer = () => {
  return new Promise((resolve, reject) => {
    const platform = os.platform()
    const command = platform === 'win32' ? 'ollama.exe' : 'ollama'
    
    ollamaProcess = spawn(command, ['serve'])
    
    ollamaProcess.stdout.on('data', (data) => {
      console.log(\`Ollama: \${data}\`)
      if (data.toString().includes('Listening')) {
        resolve()
      }
    })
    
    ollamaProcess.stderr.on('data', (data) => {
      console.error(\`Ollama Error: \${data}\`)
    })
    
    ollamaProcess.on('error', (error) => {
      reject(error)
    })
  })
}

const pullModel = (modelName) => {
  return new Promise((resolve, reject) => {
    const process = spawn('ollama', ['pull', modelName])
    
    process.stdout.on('data', (data) => {
      const output = data.toString()
      // Parse progress from output and send to renderer
      const match = output.match(/([0-9.]+)%/)
      if (match) {
        const progress = parseFloat(match[1])
        mainWindow.webContents.send('model-pull-progress', progress)
      }
    })
    
    process.stderr.on('data', (data) => {
      console.error(\`Model Pull Error: \${data}\`)
    })
    
    process.on('close', (code) => {
      if (code === 0) {
        resolve()
      } else {
        reject(new Error(\`Model pull failed with code \${code}\`))
      }
    })
  })
}

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    icon: path.join(__dirname, '../../assets/images/color_spinner_transparent.gif'),
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, '../preload/preload.js')
    }
  })

  if (isDev) {
    mainWindow.loadURL('http://localhost:5173')
    mainWindow.webContents.openDevTools()
  } else {
    mainWindow.loadFile(path.join(__dirname, '../../dist/index.html'))
  }
}

// IPC Handlers
ipcMain.handle('install-ollama', async () => {
  try {
    await installOllama()
    return true
  } catch (error) {
    throw error
  }
})

ipcMain.handle('pull-model', async (event, modelName) => {
  try {
    await pullModel(modelName)
    return true
  } catch (error) {
    throw error
  }
})

ipcMain.handle('start-ollama-server', async () => {
  try {
    await startOllamaServer()
    return true
  } catch (error) {
    throw error
  }
})

ipcMain.handle('check-ollama-status', async () => {
  return new Promise((resolve) => {
    exec('ollama --version', (error) => {
      resolve(!error)
    })
  })
})

ipcMain.handle('quit-app', () => {
  app.quit()
})

// App lifecycle
app.whenReady().then(() => {
  createWindow()

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow()
    }
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('before-quit', () => {
  if (ollamaProcess) {
    ollamaProcess.kill()
  }
}) 